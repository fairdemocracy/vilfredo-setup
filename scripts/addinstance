#!/bin/bash
##########################################################################
# Vilfredo easy installation script
# Developed by Massimiliano Alessandri <massimiliano.alessandri@gmail.com>
# version 1.3
# 10/05/2016, 11/05/2016, 14/05/2016, 15/05/2016, 16/05/2016, 17/05/2016
# Released under Affero General Public License
##########################################################################
function quitInstallation {
  dialog --backtitle 'Vilfredo new instance installation' --title 'Interrupted by user' --msgbox 'The installation procedure has been interrupted.\nNothing has been changed on server.' 6 70
  exit
}

if [ ! -x '/usr/bin/dialog' ]; then
  echo 'This script requires the "dialog" package to be installed'
  echo 'Please install it with the command "sudo apt-get install dialog".'
  exit
fi

if [ ! -x '/usr/bin/sudo' ]; then
  dialog --title 'Sudo command not found' --msgbox 'The "sudo" program must be installed in order to proceed.\nPlease install it, as root user, with the following command:\n\napt-get install sudo' 9 70
  exit
fi

dialog --backtitle 'Vilfredo instance installation procedure' --yesno 'Welcome to Vilfredo installation!\nThis procedure has been designed and tested on Debian GNU/Linux.\nIt might work on Ubuntu GNU/Linux as well.\n\nIn the next screens, you will be prompted to enter some details in order to setup a new instance of the system.\nPlease note you will need sudo rights in order to proceed.\nWould you like to continue?\nIf you wish to abort installation, select "No" now.' 13 70
if [ "$?" != "0" ]; then
  exit
fi

if [ -d '/dev/shm/' ]; then
  TMP='/dev/shm/vilfredo'
elif [ -d '/run/shm' ]; then
  TMP='/run/shm/vilfredo'
elif [ -d '/tmp' ]; then
  TMP='/tmp/vilfredo'
else
  TMP='./vilfredo-tmp'
fi

mkdir -p $TMP

#################################################################################
# Install required packages (some of them could be already present on the system)
#################################################################################
echo 'Installing or updating required Debian packages...'
if [ ! -f '/etc/apt/sources.list.d/nginx-stable-jessie.list' ]; then
  wget http://nginx.org/keys/nginx_signing.key -O $TMP/nginx_signing.key --quiet
  sudo -s -- <<EOF
    apt-key add $TMP/nginx_signing.key
    echo "deb http://nginx.org/packages/mainline/debian/ jessie nginx" > /etc/apt/sources.list.d/nginx-stable-jessie.list
EOF
fi
sudo -s -- <<EOF
  apt-get update
  apt-get dist-upgrade
  apt-get -y install vim haveged python-virtualenv python-dev libmysqlclient-dev libsqlite3-0 graphviz git gcc sudo nginx ntpdate mysql-server postfix libjansson4 libmatheval1 libyaml-0-2 libzmq3 uuid-dev libcap-dev libssl-dev libssl-doc libpcre3-dev libpcrecpp0
EOF

#############################################
# Get NGINX virtual host configuration folder
#############################################
if [ -d '/etc/nginx/sites-available' ]; then
  NGINX_CONF='/etc/nginx/sites-available'
elif [ -d '/etc/nginx/conf.d' ]; then
  NGINX_CONF='/etc/nginx/conf.d'
else
  echo "ERROR: Could not identify NGINX virtual host configuration folder."
	exit
fi

#######################################
# Install customized uwsgi-pypy package
#######################################
if [ ! -x '/usr/bin/uwsgi-pypy' ]; then
  echo 'Installing customized uwsgi-pypy package from GitHub repository...'
  wget https://raw.githubusercontent.com/fairdemocracy/vilfredo-setup/master/uwsgi-pypy.deb -O $TMP/uwsgi-pypy.deb
  sudo dpkg -i $TMP/uwsgi-pypy.deb --quiet
  rm $TMP/uwsgi-pypy.deb
fi

#######################
# Install Let's Encrypt
#######################
if [ ! -d '/usr/local/letsencrypt' ]; then
  CURRENT_DIR=`pwd`
  sudo git -C /usr/local clone https://github.com/letsencrypt/letsencrypt
  cd $CURRENT_DIR
fi

#############################
# Generate passwords randomly
#############################
VILFREDO_SECRET_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
VILFREDO_ENCRYPTION_SALT=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

#################################################
# Request instance name and perform needed checks
#################################################
# If instance name has been specified on the command line, use it as default
DEFAULT=$1

# This loop ends when there's not a database with the same name as the instance,
# or parameters have been entered to connect to an existing database.
while true; do
  NAME=$(dialog --backtitle 'Vilfredo new instance installation' --inputbox 'Please enter the name of the instance to be created.' 8 70 $DEFAULT --output-fd 1)
  case $? in
    1)
      # "Cancel" has been selected
      exit;;
    255)
      # The ESC key has been pressed
      exit;;
  esac
  unset DEFAULT
  if [ -z $NAME ]; then
    dialog --backtitle 'Vilfredo new instance installation' --title 'Empty instance name' --msgbox 'The name of the instance to be created has not been specified.\nPlease go back and try again.' 7 70
  elif [ ${#NAME} -ge 17 ]; then
    dialog --backtitle 'Vilfredo instance removal procedure' --title 'Instance name too long' --msgbox 'The name chosen for the instance is too long (cannot exceed 16 characters).\nThis is due to limitations in MySQL username length.' 7 70
  elif [[ "$NAME" == *'.'* ]]; then
    dialog --backtitle 'Vilfredo new instance installation' --title 'Invalid instance name' --msgbox 'The name of the instance cannot contain dots, due to system limitations.\nPlease go back and try again.' 7 70
  elif [ -d "/etc/$NAME" ]; then
    dialog --backtitle 'Vilfredo new instance installation' --title 'Configuration folder already exists!' --msgbox "A configuration folder named /etc/$NAME already exists!\nInstance cannot be created.\nPlease choose another name, or alternatively exit the procedure and manually remove the /etc/$NAME folder, then try again.\nIf an instance with this name already exists, you may use the \"delinstance\" script to get rid of all instance data." 12 70
  elif [ -d "/etc/cron.hourly/$NAME" ]; then
    dialog --backtitle 'Vilfredo new instance installation' --title 'Cron job already exists!' --msgbox "A cron job file named /etc/cron.hourly/$NAME already exists!\nInstance cannot be created.\nPlease choose another name or exit this procedure, then manually remove the /etc/cron.hourly/$NAME file and try again.\nIf an instance with this name already exists, use the \"delinstance\" script to get rid of all instance data." 10 70
  elif [ -d "/home/$NAME" ]; then
    dialog --backtitle 'Vilfredo new instance installation' --title 'Home folder already exists!' --msgbox "A folder named /home/$NAME already exists!\nInstance cannot be created.\nPlease choose another name or exit this procedure, then manually remove the /home/$NAME folder and try again.\nIf an instance with this name already exists, or use the \"delinstance\" script to get rid of all instance data." 10 70
  elif id "$NAME" > /dev/null 2>&1; then
    dialog --backtitle 'Vilfredo new instance installation' --title "User \"$NAME\" already exists" --msgbox "A system user named \"$NAME\" already exists.\nInstance cannot be created.\nPlease choose another name or exit this procedure, then manually remove the \"$NAME\" user.\nIf an instance with this name already exists, you may use the \"delinstance\" script to get rid of all instance data." 10 70
  elif [ $(getent group $NAME) ]; then
    dialog --backtitle 'Vilfredo new instance installation' --title "Group \"$NAME\" already exists" --msgbox "A system group named \"$NAME\" already exists.\nInstance cannot be created.\nPlease choose another name or exit this procedure, then manually remove the \"$NAME\" group.\nIf an instance with this name already exists, you may use the \"delinstance\" script to get rid of all instance data." 10 70
  else
    # Request creating a new database or connecting to an existing one
    choices=$(dialog --backtitle 'Vilfredo new instance installation' --title 'Vilfredo database' --radiolist 'Would you like to create a new database or reuse an existing one?\nPlease consider connecting to external databases requires proper authorizations to be set up and usually MySQL and/or firewall configuration. This should be set up by an expert system administrator in order to prevent security issues.\nThe above warning does not apply if database is on this same server.\n\nSelecting the first option, if another database with the same name as the instance already exist, the procedure will be interrupted and no contents will be altered.\nIf you choose the second option, you will be prompted to enter database credentials in next screen.' 20 76 16 \
    1 'Create a new database' on \
    2 'Connect to existing database' off \
    2>&1 >/dev/tty)
    if [ "$?" != '0' ]; then
      quitInstallation
    fi
    for choice in $choices
    do
      case $choice in
        1)
          while true; do
            MYSQL_ROOT_PASSWORD=$(dialog --backtitle 'Vilfredo new instance installation' --title 'MySQL root password' --insecure --passwordbox 'Please enter the password for the MySQL "root" user, which is needed in order to connect to the server and create the database.' 11 70 --output-fd 1)
            case $? in
              1)
                # "Cancel" has been selected
                exit;;
              255)
                # The ESC key has been pressed
               exit;;
            esac
            if [ -z $MYSQL_ROOT_PASSWORD ]; then
              dialog --backtitle 'Vilfredo instance removal procedure' --title 'Empty password' --msgbox 'No MySQL password has been entered.\nIn order to be able to delete the database together with all of its data, you must enter it.\nShould you not remember it at the moment, please exit the procedure and try again later.' 9 70
            else
              RESULT=`mysql --user=root --password=$MYSQL_ROOT_PASSWORD mysql -e 'SELECT user FROM user LIMIT 1'`
              if [ "$?" == "1" ]; then
                dialog --backtitle 'Vilfredo new instance installation' --title 'Wrong password' --msgbox 'An error occurred while attempting to connect to MySQL database server running on localhost.\nPlease check you entered the right password and try again.\nShould you not remember it at the moment, please exit the procedure and try again later.' 9 70
              else
                break
              fi
            fi
          done
          RESULT=`mysqlshow --user=root --password=$MYSQL_ROOT_PASSWORD | grep -v Wildcard | grep -o ' $NAME '`
          if [ "$RESULT" == "$NAME" ]; then
            dialog --backtitle 'Vilfredo new instance installation' --title "Database \"$NAME\" already exists!" --msgbox "A MySQL database named \"$NAME\" already exists!\nDatabase has NOT been deleted. You will be then requested to choose another name for this instance.\n\nIf you want to get rid of an existing instance to reuse its name, quit this procedure instead, then use the \"delinstance\" script to delete all of its data and configuration from this system." 11 70
          else
            # Break the loop asking for an instance name and proceed with installation
            break 2
          fi
          # Database will be created later
          MYSQL_PARAMS=''
          ;;
        2)
          exec 3>&1;
          result=$(dialog --backtitle 'Vilfredo new instance installation' --title 'MySQL connection settings' \
          --form "Please enter the credentials for the existing MySQL database.\nDouble check them: in case they are incorrect, the instance will not be able to connect to the database.\n\nThese will be stored into /etc/$NAME/settings.cfg file." 19 58 6 \
          'MySQL Server:' 1 1 'localhost' 1 20 32 80 \
          'Port:' 2 1 '3306' 2 20 32 5 \
          'Username:' 3 1 '' 3 20 32 32 \
          'Password:' 4 1 '' 4 20 32 32 \
          'Database name:' 5 1 '' 5 20 32 60 2>&1 1>&3);
          exitcode=$?;
          exec 3>&-;
          # If "Cancel" has been selected or the ESC key has been pressed
          if [ "$exitcode" == '1' -o "$exitcode" == '255' ]; then
            quitInstallation
          fi
          MYSQL_PARAMS=($(awk -F: '{$1=$1} 1' <<<"${result}"))
          # Break the loop asking for an instance name and proceed with installation
          break 2
          ;;
      esac
    done
  fi
done

######################################
# Request domain name for the instance
######################################
while true; do
  DOMAIN=$(dialog --backtitle 'Vilfredo new instance installation' --inputbox 'Please enter the domain name to be assigned to this instance.\nPlease note it should have been already defined on the DNS, otherwise the SSL certificate creation will fail and HTTPS will have to be configured by hand.\n\nDo not enter the "www." prefix now! If you want to add it, please refer to next step.' 14 70 --output-fd 1)
  if [ "$?" != '0' ]; then
    quitInstallation
  fi
  if [ -z $DOMAIN ]; then
    dialog --backtitle 'Vilfredo instance removal procedure' --title 'Empty domain name' --msgbox 'No domain name has been specified for virtual host to be created.\nIf you cannot determine it now, or still have not defined it on the DNS, please exit the procedure and try again later.' 7 70
  else
    # Check if there's another virtual host with the same exact domain name
    DOMAIN_EXISTS=`grep " $DOMAIN" $NGINX_CONF/*`
    if [ -z $DOMAIN_EXISTS ]; then
      break
    fi
    dialog --backtitle 'Vilfredo new instance installation' --title 'Domain already existing' --msgbox 'There already exists another virtual host defined on the same domain.\nPlease choose a different domain name.' 7 70
  fi
done

dialog --backtitle 'Vilfredo new instance installation' --yesno "Do you want to also add the www.$DOMAIN subdomain name to the configuration?\nThis must have been already configured in the DNS.\nPlease check twice it actually exists, otherwise no SSL certificate will be generated and the website will remain unsecured (accessible through the HTTP protocol only).\nSuch a situation can only be repaired by adding the missing entry into the DNS, deleting and recreating the instance, or manually fixed." 14 70
NO_WWW_DOMAIN="$?"

# After a "delinstance", if we're still in deleted folder, procedure could break abruptly
# with a "fatal: Unable to read current working directory"
# To prevent this, cd to /home folder
cd /home

##################################################
# Request code branch to be downloaded from GitHub
##################################################
result=`git ls-remote --heads 'https://github.com/fairdemocracy/vilfredo-core.git'|sed -r 's|^[a-z0-9]+\s+refs/heads/(.+)|\1|g'`
branches=($(awk -F: '{$1=$1} 1' <<<"${result}"))
options=''
counter=1
for i in ${branches[@]}; do
  if [ "$i" == 'master' ]; then
    options="$options $counter $i on"
  else
    options="$options $counter $i off"
  fi
  let counter=counter+1
done
let rows=counter+8
choices=$(dialog --backtitle 'Vilfredo new instance installation' --title 'Choose vilfredo-core GIT branch' --radiolist 'Please select which branch would you like to download from the "vilfredo-core" GitHub repository:' $rows 76 16 $options 2>&1 >/dev/tty)
if [ "$?" != '0' ]; then
  quitInstallation
fi
for choice in $choices
do
  CORE_BRANCH=${branches[$choice - 1]}
done

result=`git ls-remote --heads 'https://github.com/fairdemocracy/vilfredo-client.git'|sed -r 's|^[a-z0-9]+\s+refs/heads/(.+)|\1|g'`
branches=($(awk -F: '{$1=$1} 1' <<<"${result}"))
options=''
counter=1
for i in ${branches[@]}; do
  if [ "$i" == 'master' ]; then
    options="$options $counter $i on"
  else
    options="$options $counter $i off"
  fi
  let counter=counter+1
done
let rows=counter+8
choices=$(dialog --backtitle 'Vilfredo new instance installation' --title 'Choose vilfredo-client GIT branch' --radiolist 'Please select which branch would you like to download from the "vilfredo-client" GitHub repository:' $rows 76 16 $options 2>&1 >/dev/tty)
if [ "$?" != '0' ]; then
  quitInstallation
fi
for choice in $choices
do
  CLIENT_BRANCH=${branches[$choice - 1]}
done

#####################################
# Ask if debug mode should be enabled
#####################################
dialog --backtitle 'Vilfredo new instance installation' --title 'Set debug mode' --yesno "Would you like to run the instance in debug mode?\nPlease note this could write passwords and other sensible data in clear text into log files." 7 70
if [ "$?" == '0' ]; then
  DEBUG_MODE=1
fi

##############################
# Request mail server settings
##############################
exec 3>&1;
result=$(dialog --backtitle 'Vilfredo new instance installation' --title 'Mail server settings' \
--form 'Vilfredo needs a mail server in order to send notifications and other kind of messages to its users.\nNowadays, it has become increasingly difficult to send mail messages such a way which will not make them consider spam by major providers such as GMail or MSN.\nYou may set up your own mail server, but this could be rather difficult (also requires adding some keys to the DNS) and thus should be left to experienced system administrators only.\nAlternatively, you might as well resort to an external mail server, using SMTP authentication.\nIn this case, edit default values with your mail server credentials.' 24 70 6 \
'SMTP Server:' 1 1 'localhost' 1 30 34 80 \
'Port:' 2 1 '25' 2 30 34 80 \
'Username (or email address):' 3 1 '' 3 30 34 80 \
'Authentication password:' 4 1 '' 4 30 34 80 2>&1 1>&3);
exitcode=$?;
exec 3>&-;
# If "Cancel" has been selected or the ESC key has been pressed
if [ "$exitcode" == '1' -o "$exitcode" == '255' ]; then
  quitInstallation
fi

SMTP_PARAMS=($(awk -F: '{$1=$1} 1' <<<"${result}"))

EMAIL_SENDER=$(dialog --backtitle 'Vilfredo new instance installation' --title "System messages email sender" --inputbox "Please enter the email address which will be used as sender for all system generated messages.\nTo prevent messages from being marked as spam, the mail server should have been configured to digitally sign all email messages from that domain using DKIM, the DKIM public key should be uploaded to the DNS for the domain and a SPF record should be added to.\n\nIf you do not know how to proceed, it is strongly suggested to specify an email address on a domain which the selected SMTP server is already able to deliver messages from without errors." 17 80 admin@$DOMAIN --output-fd 1)
if [ "$?" != "0" ]; then
  quitInstallation
fi

###############################
# Request Google Analytics code
###############################
GOOGLE_CODE=$(dialog --backtitle 'Vilfredo new instance installation' --inputbox "Please enter the Google unique identification code to track this website using Google Analytics.\nThis can be safely omitted and entered later by editing the following file:\n\n/home/$NAME/vilfredo-client/static/templates/analytics.template.html" 13 80 UA-XXXXXXXX-X --output-fd 1)
if [ "$?" != "0" ]; then
  quitInstallation
fi

############################################
# Create the log folder and set log filename
############################################
LOGFILE=$TMP/install.log
echo "$(date) Started $NAME Vilfredo instance installation." > $TMP/install.log
sudo chmod 777 $TMP/install.log

###########################
# Create the MySQL database
###########################
if [ ! -z $MYSQL_ROOT_PASSWORD ]; then
  VILFREDO_MYSQL_PASSWORD=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
  wget https://raw.githubusercontent.com/fairdemocracy/vilfredo-setup/master/database.sql -O $TMP/database.sql --quiet
  # Enter MySQL command line prompt (please enter your MySQL root password to proceed)
  # Replace "vilfredo" with the name of the database you want to use for Vilfredo installation
  # Replace "vilfredo_mysql_password" with your chosen "vilfredo" user MySQL password
  echo "Creating MySQL database $NAME..."
  mysql --user=root --password=$MYSQL_ROOT_PASSWORD -e "DROP DATABASE IF EXISTS $NAME;CREATE DATABASE $NAME;USE $NAME;SET NAMES UTF8;SOURCE $TMP/database.sql;GRANT USAGE ON *.* TO '$NAME'@'localhost' IDENTIFIED BY '$VILFREDO_MYSQL_PASSWORD';GRANT SELECT, INSERT, UPDATE, DELETE ON $NAME.* TO $NAME@localhost;" >> $LOGFILE
  rm $TMP/database.sql
  echo "$(date) Created database $NAME" >> $LOGFILE
fi

#####################
# Install application
#####################
sudo adduser --disabled-password --gecos "$NAME instance user" $NAME >> $LOGFILE
if [ "$?" == "1" ]; then
  dialog --backtitle 'Vilfredo new instance installation' --title 'Cannot create system user and group' --msgbox 'An error occurred while attempting to create system user or group.\nPlease try again later.' 7 70
  echo "$(date) Could not create system user and group $NAME" >> $LOGFILE
  deluser $NAME >> $LOGFILE
  delgroup $NAME >> $LOGFILE
  exit
fi

sudo -u $NAME -s -- <<EOF
  cd /home/$NAME
  echo "Downloading vilfredo-core $CORE_BRANCH repository..."
  echo "$(date) Downloading vilfredo-core $CORE_BRANCH repository" >> $LOGFILE
  git clone -b $CORE_BRANCH https://github.com/fairdemocracy/vilfredo-core.git >> $LOGFILE
  echo "Downloading vilfredo-client $CLIENT_BRANCH repository..."
  echo "$(date) Downloading vilfredo-client $CLIENT_BRANCH repository" >> $LOGFILE
  git clone -b $CLIENT_BRANCH https://github.com/fairdemocracy/vilfredo-client.git >> $LOGFILE
  echo 'Creating Python virtual environment...'
  echo "$(date) Creating Python virtual environment" >> $LOGFILE
  virtualenv vilfredo-ve --python=/usr/bin/pypy >> $LOGFILE
  . vilfredo-ve/bin/activate
  echo 'Installing setuptools Python package...'
  pip install -U setuptools >> $LOGFILE
  echo 'Installing itsdangerous Python package...'
  pip install itsdangerous==0.23 >> $LOGFILE
  echo 'Installing argparse Python package...'
  pip install argparse==1.2.1 >> $LOGFILE
  echo 'Installing alembic Python package...'
  pip install alembic==0.7.4 >> $LOGFILE
  echo 'Installing Flask-Script Python package...'
  pip install Flask-Script==0.6.7 >> $LOGFILE
  echo 'Installing Flask-Migrate Python package...'
  pip install Flask-Migrate==1.3.0 >> $LOGFILE
  echo 'Installing Pillow Python package...'
  pip install Pillow==2.8.1 >> $LOGFILE
  echo 'Installing requests Python package...'
  pip install requests==2.7.0 >> $LOGFILE
  echo 'Installing ipython Python package...'
  pip install ipython==4.0.0 >> $LOGFILE
  echo 'Installing Flask Python package...'
  pip install Flask==0.10 >> $LOGFILE
  echo 'Installing Flask-Mail Python package...'
  pip install Flask-Mail==0.8.2 >> $LOGFILE
  echo 'Installing Flask-Babel Python package...'
  pip install Flask-Babel==0.8 >> $LOGFILE
  echo 'Installing Flask-Login Python package...'
  pip install Flask-Login==0.2.6 >> $LOGFILE
  echo 'Installing SQLAlchemy Python package...'
  pip install SQLAlchemy==0.8.2 >> $LOGFILE
  echo 'Installing Flask-SQLAlchemy Python package...'
  pip install Flask-SQLAlchemy==1.0 >> $LOGFILE
  echo 'Installing Flask-CDN Python package...'
  pip install Flask-CDN==1.2.1 >> $LOGFILE
  echo 'Installing flask-util-js Python package...'
  pip install flask-util-js==0.2.19 >> $LOGFILE
  echo 'Installing MySQL-python Python package...'
  pip install MySQL-python==1.2.5 >> $LOGFILE
  echo 'Installing pyparsing Python package...'
  pip install pyparsing==1.5.7 >> $LOGFILE
  echo 'Installing pydot Python package...'
  pip install pydot==1.0.2 >> $LOGFILE
  deactivate
  echo 'Creating symbolic links for static and templates folder...'
  echo "$(date) Creating symbolic links for static and templates folder" >> $LOGFILE
  ln -sf /home/$NAME/vilfredo-client/static /home/$NAME/vilfredo-core/VilfredoReloadedCore/static
  ln -sf /home/$NAME/vilfredo-client/templates /home/$NAME/vilfredo-core/VilfredoReloadedCore/templates
EOF
echo "$(date) Setting static folder as owned by www-data group" >> $LOGFILE
sudo chgrp www-data /home/$NAME/vilfredo-client/static

#######################
# Configure application
#######################
echo "Configuring instance..."
echo "$(date) Creating configuration folder for instance at /etc/$NAME..." >> $LOGFILE
sudo -s -- <<EOF
  mkdir /etc/$NAME
  chown $NAME:www-data /etc/$NAME
EOF
# Configure "settings.cfg" (Vilfredo core settings)
echo "$(date) Configuring /etc/$NAME/settings.cfg..." >> $LOGFILE
sudo -u $NAME wget https://raw.githubusercontent.com/fairdemocracy/vilfredo-setup/master/settings.cfg -O /etc/$NAME/settings.cfg --quiet
if [ "$NO_WWW_DOMAIN" == '1' ]; then
  sudo -u $NAME sed -i s/www.vilfredo.org/$DOMAIN/g /etc/$NAME/settings.cfg
else
  sudo -u $NAME sed -i s/www.vilfredo.org/www.$DOMAIN/g /etc/$NAME/settings.cfg
fi
sudo -u $NAME -s -- <<EOF
  sed -i "s!home/vilfredo!home/$NAME!g" /etc/$NAME/settings.cfg
  sed -i "s!var/log/vilfredo/vilfredo-vr.log!var/log/$NAME/vr.log!g" /etc/$NAME/settings.cfg
  sed -i "s/MAIL_SERVER = 'localhost/MAIL_SERVER = '${SMTP_PARAMS[0]}/g" /etc/$NAME/settings.cfg
  sed -i "s/MAIL_PORT = 25/MAIL_PORT = ${SMTP_PARAMS[1]}/g" /etc/$NAME/settings.cfg
  sed -i "s/'admin@' + SITE_DOMAIN/'$EMAIL_SENDER'/g" /etc/$NAME/settings.cfg
EOF
# If debug mode has not been set, disable debug mode
if [ -z $DEBUG_MODE ]; then
  sudo -u $NAME sed -i 's/DEBUG = True/DEBUG = False/g' /etc/$NAME/settings.cfg
fi
if [ "$SMTP_PARAMS[2]" != '' ]; then
  sudo -u $NAME sed -i "s/MAIL_USERNAME = None/MAIL_USERNAME = '${SMTP_PARAMS[2]}'/g" /etc/$NAME/settings.cfg
fi
if [ "$SMTP_PARAMS[3]" != '' ]; then
  sudo -u $NAME sed -i "s/MAIL_PASSWORD = None/MAIL_PASSWORD = '${SMTP_PARAMS[3]}'/g" /etc/$NAME/settings.cfg
fi
if [ -z $MYSQL_PARAMS ]; then
  sudo -u $NAME sed -i "s!vilfredo:vilfredo_mysql_password@localhost/vilfredo!$NAME:$VILFREDO_MYSQL_PASSWORD@localhost/$NAME!g" /etc/$NAME/settings.cfg
else
  sudo -u $NAME sed -i "s!mysql+mysqldb://vilfredo:vilfredo_mysql_password@localhost/vilfredo!mysql+mysqldb://${MYSQL_PARAMS[2]}:${MYSQL_PARAMS[3]}@${MYSQL_PARAMS[0]}/${MYSQL_PARAMS[4]}!g" /etc/$NAME/settings.cfg
fi
sudo -u $NAME -s -- <<EOF
  sed -i "s/secret_key/$VILFREDO_SECRET_KEY/g" /etc/$NAME/settings.cfg
  sed -i "s/vilfredo_salt/$VILFREDO_ENCRYPTION_SALT/g" /etc/$NAME/settings.cfg
  ln -sf /etc/$NAME/settings.cfg /home/$NAME/vilfredo-core/VilfredoReloadedCore
  chmod o-r /etc/$NAME/settings.cfg
EOF
# Configure "settings.js"
echo "$(date) Configuring /etc/$NAME/settings.js..." >> $LOGFILE
sudo -u $NAME mv /home/$NAME/vilfredo-client/static/js/settings.js /etc/$NAME
if [ "$NO_WWW_DOMAIN" == '1' ]; then
  sudo -u $NAME sed -i s/127.0.0.1:8080/$DOMAIN/g /etc/$NAME/settings.js
else
  sudo -u $NAME sed -i s/127.0.0.1:8080/www.$DOMAIN/g /etc/$NAME/settings.js
fi
sudo -u $NAME -s -- <<EOF
  sed -i s/https/http/g /etc/$NAME/settings.js
  ln -sf /etc/$NAME/settings.js /home/$NAME/vilfredo-client/static/js
EOF
sudo chown -h $NAME /home/$NAME/vilfredo-client/static/js/settings.js
# Configure "logging_debug.conf"
echo "$(date) Configuring /etc/$NAME/logging_debug.conf..." >> $LOGFILE
sudo -u $NAME -s -- <<EOF
  wget https://raw.githubusercontent.com/fairdemocracy/vilfredo-setup/master/logging_debug.conf -O /etc/$NAME/logging_debug.conf --quiet
  chmod o-r /etc/$NAME/logging_debug.conf
  sed -i s!/var/log/vilfredo/vilfredo-vr.log!/var/log/$NAME/vr.log!g /etc/$NAME/logging_debug.conf
  ln -sf /etc/$NAME/logging_debug.conf /home/$NAME/vilfredo-core/VilfredoReloadedCore
  sed -i s/UA-XXXXXXXX-X/$GOOGLE_CODE/g /home/$NAME/vilfredo-client/static/templates/analytics.template.html
EOF
sudo -s -- <<EOF
  # Create log folders
  echo "$(date) Creating instance VR web server log folder at /var/log/$NAME..." >> $LOGFILE
  mkdir /var/log/$NAME
  chown $NAME /var/log/$NAME
  echo "$(date) Creating instance NGINX log folder at /var/log/nginx/$NAME..." >> $LOGFILE
  mkdir /var/log/nginx/$NAME
  # This file is not needed in this setup - delete it if it has been downloaded from repository
  rm -f /home/$NAME/vilfredo-core/VilfredoReloadedCore/main.py
  # Allow NGINX serving static files in instance folder
  chgrp -R www-data /home/$NAME
EOF

############################
# Configure NGINX web server
############################
echo "Configuring NGINX web server for new instance $NAME..."
echo "$(date) Configuring NGINX web server..." >> $LOGFILE
# Note: This folder exists only to allow SSL certificate validation
if [ ! -f '/etc/nginx/dhparam.pem' ]; then
  echo "$(date) Generating Diffie-Hellman parameters file /etc/nginx/dhparam.pem..." >> $LOGFILE
  sudo -s -- <<EOF
    openssl dhparam -out /etc/nginx/dhparam.pem 4096 >> $LOGFILE
    sudo chmod 600 /etc/nginx/dhparam.pem >> $LOGFILE
EOF
fi

if [ ! -f '/etc/nginx/snippets/ssl.conf' ]; then
  echo "$(date) Creating NGINX snippet to enable SSL based websites..." >> $LOGFILE
  mkdir -p /etc/nginx/snippets
  sudo cat > /etc/nginx/snippets/ssl.conf <<EOF
ssl on;
ssl_dhparam               dhparam.pem;
ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
ssl_session_timeout       5m;
ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;
ssl_prefer_server_ciphers on;
ssl_stapling              on;
ssl_stapling_verify       on;
resolver                  8.8.4.4 8.8.8.8 valid=300s;
resolver_timeout          5s;
add_header                Strict-Transport-Security "max-age=31536000";
EOF
fi
# Compile domain list
if [ "$NO_WWW_DOMAIN" == '1' ]; then
  DOMAINS=$DOMAIN
else
  DOMAINS="www.$DOMAIN $DOMAIN"
fi
# Install NGINX virtual host configuration file
echo "$(date) Installing NGINX virtual host configuration file $NGINX_CONF/$NAME.conf..." >> $LOGFILE
sudo cat > $NGINX_CONF/$NAME.conf <<EOF
server {
  listen 80;
  listen [::]:80;
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name $DOMAINS;

  root /home/$NAME/vilfredo-client/static;

  #include              snippets/ssl.conf;
  #ssl_certificate      /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
  #ssl_certificate_key  /etc/letsencrypt/live/$DOMAIN/privkey.pem;

  access_log /var/log/nginx/$NAME/access.log;
  error_log /var/log/nginx/$NAME/error.log;

  location / {
    try_files \$uri @vilfredo;
  }
  location @vilfredo {
    include uwsgi_params;
    uwsgi_pass unix:/tmp/uwsgi_$NAME.sock;
  }

  # Enables GZIP compression if not already enabled
  gzip on;
  gzip_disable "msie6";
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 9;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;

  server_tokens off;

}
EOF

# Note: This symbolic link is only needed if we wrote configuration in /etc/nginx/sites-available
if [ -d '/etc/nginx/sites-enabled' ]; then
  echo "$(date) Enabling NGINX virtual host configuration file..." >> $LOGFILE
  sudo ln -sf /etc/nginx/sites-available/$NAME.conf /etc/nginx/sites-enabled
fi

echo "$(date) Creating UWSGI-PyPy configuration file..." >> $LOGFILE
sudo cat > /etc/uwsgi-pypy/apps-available/$NAME.ini <<EOF
[uwsgi]
# Note: We cannot use /var/run/uwsgi_$NAME.sock due to permissions issues
socket=/tmp/uwsgi_$NAME.sock
chmod-socket=666
abstract-socket=false

master=true
workers=2

uid=$NAME
gid=www-data

post-buffering=8192

vhost=true
chdir=/home/$NAME

# Configuration when running under Python
pp=/home/$NAME/vilfredo-core/VilfredoReloadedCore
venv=/home/$NAME/vilfredo-ve
module=main
callable=app

# Configuration when running under PyPy
pypy-lib=/usr/lib/pypy/libpypy-c.so
pypy-pp=/home/$NAME/vilfredo-core
pypy-home=/home/$NAME/vilfredo-ve
pypy-wsgi=VilfredoReloadedCore:app
EOF
sudo -s -- <<EOF
  ln -sf /etc/uwsgi-pypy/apps-available/$NAME.ini /etc/uwsgi-pypy/apps-enabled
  echo "Restarting web services..."
  service nginx stop >> $LOGFILE
  service uwsgi-pypy stop >> $LOGFILE
  killall -9 uwsgi-pypy >> $LOGFILE
  service uwsgi-pypy start >> $LOGFILE
  service nginx start >> $LOGFILE
EOF

#########################
# Request SSL certificate
#########################
echo "Requesting a free SSL certificate for https://$DOMAIN"
echo "$(date) Requesting a free SSL certificate for https://$DOMAIN..." >> $LOGFILE
# Note: Only now that we've configured NGINX, we can request the certificate
if [ "$NO_WWW_DOMAIN" == '1' ]; then
  sudo /usr/local/letsencrypt/letsencrypt-auto certonly --webroot -w /home/$NAME/vilfredo-client/static -d $DOMAIN
  RET="$?" >> $LOGFILE
else
  sudo /usr/local/letsencrypt/letsencrypt-auto certonly --webroot -w /home/$NAME/vilfredo-client/static -d $DOMAIN -d www.$DOMAIN >> $LOGFILE
  RET="$?"
fi
if [ "$RET" == '1' ]; then
  # Cannot configure HTTPS: disable it on configuration files
  echo "$(date) Could not request SSL certificate: disabling HTTPS for website $DOMAIN..." >> $LOGFILE
  sudo -u $NAME -s -- <<EOF
    sed -i s/https:/http:/g /etc/$NAME/settings.js
    sed -i s/https:/http:/g /etc/$NAME/settings.cfg
EOF
  sudo -s -- <<EOF
    sed -i 's/  listen 443 ssl http2;//' $NGINX_CONF/$NAME.conf
    sed -i 's/  listen [::]:443 ssl http2;//' $NGINX_CONF/$NAME.conf
EOF
  echo 'Restarting web services...'
  echo "$(date) Restarting web services in order to take changes into account..." >> $LOGFILE
  dialog --backtitle 'Vilfredo new instance installation' --title 'Cannot install SSL certificate' --msgbox "A problem occurred while attempting to obtain a free SSL certificate from Let's Encrypt.\nThe web site will run unsecured (with the HTTP protocol).\nPlease fix this problem manually, or otherwise delete and recreate the instance later." 9 70
else
  echo "$(date) Enabling HTTPS for website $DOMAIN..." >> $LOGFILE
  sudo -u $NAME -s -- <<EOF
    sed -i s/http:/https:/g /etc/$NAME/settings.js
    sed -i s/http:/https:/g /etc/$NAME/settings.cfg
EOF
  sudo -s -- <<EOF
    sed -i s/#include/include/g $NGINX_CONF/$NAME.conf
    sed -i s/#ssl_/ssl_/g $NGINX_CONF/$NAME.conf
EOF
fi

######################
# Restart web services
######################
echo 'Restarting web services...'
echo "$(date) Restarting web services in order to take changes into account..." >> $LOGFILE
sudo -s -- <<EOF
service nginx stop >> $LOGFILE
service uwsgi-pypy stop >> $LOGFILE
killall -9 uwsgi-pypy >> $LOGFILE
service uwsgi-pypy start >> $LOGFILE
service nginx start >> $LOGFILE
EOF

###########################################################
# Adding a cron job to automatically renew SSL certificates
###########################################################
if [ ! -f '/etc/cron.monthly/letsencrypt' ]; then
  echo 'Adding a weekly cron job to automatically renew SSL certificates...'
  echo "$(date) Adding a weekly cron job to automatically renew SSL certificates..." >> $LOGFILE
  sudo cat > /etc/cron.weekly/letsencrypt <<EOF
#!/bin/sh
service nginx stop
/usr/local/letsencrypt/letsencrypt-auto renew -nvv --standalone > /var/log/letsencrypt/renew.log 2>&1
LE_STATUS=$?
service nginx start
if [ "$LE_STATUS" != 0 ]; then
  echo Automated renewal failed:
  cat /var/log/letsencrypt/renew.log
  exit 1
fi
EOF
  sudo chmod 700 /etc/cron.monthly/letsencrypt
fi

######################################
# Adds symbolic links to all log files
######################################
echo "$(date) Adding symbolic links to all log files in folder /home/$NAME/log..." >> $LOGFILE
sudo -u $NAME mkdir /home/$NAME/log
sudo -s -- <<EOF
  ln -s /var/log/$NAME/vr.log /home/$NAME/log/flask-vr.log
  ln -s /var/log/nginx/$NAME/access.log /home/$NAME/log/nginx-access.log
  ln -s /var/log/nginx/$NAME/error.log /home/$NAME/log/nginx-error.log
  ln -s /var/log/uwsgi-pypy/app/$NAME.log /home/$NAME/log/uwsgi-pypy.log
  chown -h $NAME:users /home/$NAME/log/*
EOF

#########################################################
# Adding a script to keep website in sync with repository
#########################################################
# Note: This not optimal (the process should be triggered on every commit)
# but that's the easiest solution at the moment
echo "Adding script to automatically update code from repository $BRANCH..."
echo "$(date) Adding script to automatically update code from repository $BRANCH..." >> $LOGFILE
sudo -u $NAME mkdir /home/$NAME/bin
sudo -u $NAME cat > /home/$NAME/bin/checkout <<EOF
#!/bin/bash
sudo -u $NAME git -C /home/$NAME/vilfredo-core checkout
sudo -u $NAME git -C /home/$NAME/vilfredo-client checkout
EOF
sudo chmod u+x /home/$NAME/bin/checkout
dialog --backtitle 'Vilfredo new instance installation' --title 'GIT checkout script created' --yesno "An easy to execute script, named /home/$NAME/bin/checkout, has been created for you.\nThis can be manually invoked to update instance code downloading latest changes from the GIT repository.\nWould you like to configure a cron job, executed each hour, in order to automate the process and always keep the code in sync with latest changes?\nThis can be performed automatically by this procedure." 13 70
if [ "$?" == '0' ]; then
  sudo -s -- <<EOF
    ln -s /home/$NAME/bin/checkout /etc/cron.hourly/$NAME
    chmod 700 /etc/cron.hourly/$NAME
EOF
fi

echo "$(date) Installation completed." >> $LOGFILE
sudo -s -- <<EOF
mv $TMP/install.log /home/$NAME/log/install.log
chown $NAME:users /home/$NAME/log/install.log
chmod 640 /home/$NAME/log/install.log
rm -rf $TMP
EOF

# Display the successful install confirmation message
dialog --backtitle 'Vilfredo new instance installation' --title 'Vilfredo instance installation completed' --msgbox "A new Vilfredo instance named \"$NAME\" has been installed successfully!\nIf you have already configured DNS, you will find it at http://$DOMAIN/\n\nA detailed installation log has been generated at /home/$NAME/log/install.log" 12 70

clear
